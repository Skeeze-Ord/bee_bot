import telebot
from telebot import types

# Bot key
bot = telebot.TeleBot("")

# TG ID
TELEGRAM_ID = ""

is_question_mode = False

name = ""
questions = {
    1: {
        "question_text": "üìÖ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–æ—Ä—É–º?",
        "answer_text": "–§–æ—Ä—É–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å 03.11 –ø–æ 05.11"
    },
    2: {
        "question_text": "üïê –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è —Ñ–æ—Ä—É–º?",
        "answer_text": "–§–æ—Ä—É–º –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 3 –¥–Ω—è (—Å –ø—è—Ç–Ω–∏—Ü—ã –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"
    },
    3: {
        "question_text": "üè† –ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–æ—Ä—É–º?",
        "answer_text": "–§–æ—Ä—É–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Ç–æ—Ä–µ –ø–∞—Ä–æ—Ö–æ–¥—Å—Ç–≤–∞ –ø–æ –∞–¥—Ä–µ—Å—É 25 –û–∫—Ç—è–±—Ä—è, 23–∞ —Å—Ç1"
    },
    4: {
        "question_text": "üë• –ö—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ä—É–º–∞",
        "answer_text": "AIESEC - —ç—Ç–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –º–æ–ª–æ–¥–µ–∂–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –≤ –±–æ–ª–µ–µ —á–µ–º 120 "
                       "—Å—Ç—Ä–∞–Ω–∞—Ö.\n\nAIESEC –≤ –¢—é–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç —É–∂–µ 6 –ª–µ—Ç, –∑–∞–Ω–∏–º–∞—è—Å—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö "
                       "—Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –†–æ—Å—Å–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥—è —Ñ–æ—Ä—É–º—ã –∏ –∏–≤–µ–Ω—Ç—ã, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ "
                       "—Ä–∞–∑–≤–∏—Ç–∏–µ –º–æ–ª–æ–¥–µ–∂–Ω–æ–≥–æ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ –∏ –º–µ–∂–∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è. "
    },
    5: {
        "question_text": "‚ùî –ß—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–æ—Ä—É–º?",
        "answer_text": "¬´–ü—á–µ–ª–∞ 2.0¬ª - –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è digital-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ IT –∏ digital —Å—Ñ–µ—Ä"
    },
}


def main_menu():
    keyboard = types.InlineKeyboardMarkup()

    key_reg = types.InlineKeyboardButton(text='üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='registration')
    keyboard.add(key_reg)
    key_question = types.InlineKeyboardButton(text='‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='question')
    keyboard.add(key_question)
    key_group = types.InlineKeyboardButton(text='üë• –ì—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data='group')
    keyboard.add(key_group)
    key_program = types.InlineKeyboardButton(text='üìä –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ñ–æ—Ä—É–º–∞', callback_data='programm')
    keyboard.add(key_program)

    return keyboard


@bot.message_handler(content_types=['text'])
def start(message):
    global is_question_mode
    if message.text.lower() == "/start":
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä—É–º–∞ "
                                               "¬´–ü—á–µ–ª–∞ 2.0¬ª! –ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        bot.register_next_step_handler(message, get_name)
    elif is_question_mode:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–∫–Ω–æ–ø–æ–∫)")
    else:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ '/start'")


def get_name(message):
    global name
    name = message.text

    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
    keyboard.add(key_yes)

    question = "–•–æ—Ä–æ—à–æ, " + name + ". –ü—Ä–æ–¥–æ–ª–∂–∏–º?"

    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    global is_question_mode
    is_question_mode = True

    if call.data == "yes":
        bot.send_message(call.message.chat.id, "–° —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=main_menu())
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data == "registration":
        bot.send_message(call.message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Ñ–æ—Ä—É–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: \n\nhttps://bit.ly/pchela_tmn")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–° —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=main_menu())

    elif call.data == "group":
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ! –¢–∞–º –º—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ "
                                               "–ø—Ä–∏–∑—ã –∏ –ø—É–±–ª–∏–∫—É–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ :) \n\nhttps://vk.com/pchela_tmn")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–° —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=main_menu())

    elif call.data == "programm":
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ñ–æ—Ä—É–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–° —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=main_menu())

    elif call.data == "question":
        keyboard = types.InlineKeyboardMarkup()

        for question_id, question_data in questions.items():
            question_button = types.InlineKeyboardButton(text=question_data["question_text"],
                                                         callback_data=f'answer_{question_id}')
            keyboard.add(question_button)

        key_no_question = types.InlineKeyboardButton(text='–¢—É—Ç –Ω–µ—Ç –º–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞', callback_data='no_question')
        keyboard.add(key_no_question)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)

        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data.startswith("answer_"):
        question_id = call.data.split("_", 1)[1]
        question_data = questions.get(int(question_id))

        if question_data:
            answer_text = question_data["answer_text"]
        else:
            answer_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        bot.send_message(call.message.chat.id, answer_text)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–° —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=main_menu())

    elif call.data == "no_question":
        bot.send_message(call.message.chat.id,
                         "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞ –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ (–æ—Ñ—Ñ—Ç–æ–ø –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è).")
        bot.register_next_step_handler(call.message, handle_user_question)


def handle_user_question(message):
    user_question = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_user_info(message.from_user)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    send_telegram_message(user_question, user_info)

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –û–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–º–∞–Ω–¥–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω. –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    bot.send_message(message.chat.id, "–° —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=main_menu())


def send_telegram_message(message_text, user_info):
    try:
        user_id = user_info["id"]
        username = user_info.get("username", "")
        first_name = user_info.get("first_name", "")
        last_name = user_info.get("last_name", "")

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –≤–æ–ø—Ä–æ—Å–µ
        user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nID: {user_id}\n–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\n\n"
        full_message_text = user_info_text + f"–í–æ–ø—Ä–æ—Å: {message_text}"

        bot.send_message(TELEGRAM_ID, full_message_text)
        bot.send_message(Kristina_TG_ID, full_message_text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram:", e)


def get_user_info(user):
    user_info = {
        "id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    }
    return user_info


bot.polling(none_stop=True, interval=0)
